"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const theme_1 = require("typedoc-plugin-markdown/dist/theme");
const events_1 = require("typedoc/dist/lib/output/events");
const utils_1 = require("./components/utils");
class GithubWikiTheme extends theme_1.default {
    constructor(renderer, basePath) {
        super(renderer, basePath);
        this.renderer = renderer;
        renderer.addComponent('github-wiki-utils', new utils_1.UtilsComponent(renderer));
        this.renderer.application.options.setValue('entryDocument', 'Home.md');
        this.renderer.application.options.setValue('hideInPageTOC', true);
        this.renderer.application.options.setValue('hideBreadcrumbs', true);
        this.listenTo(renderer, events_1.RendererEvent.END, this.onRendererEnd, 1024);
    }
    toUrl(mapping, reflection) {
        const kindLabelMap = {
            modules: 'Module',
            classes: 'Class',
            interfaces: 'Interface',
            functions: 'Function',
            enums: 'Enum',
        };
        return ((kindLabelMap[mapping.directory] || mapping.directory) +
            ': ' +
            this.getUrl(reflection) +
            '.md');
    }
    getUrl(reflection) {
        const url = reflection.name;
        return url;
    }
    onRendererEnd(renderer) {
        const parseUrl = (url) => '../wiki/' + url.replace('.md', '');
        const navigation = this.getNavigation(renderer.project);
        const navJson = [
            `## [${renderer.project.name}](${parseUrl(this.entryDocument)})\n`,
        ];
        if (this.readme !== 'none') {
            navJson.push(`- [Modules](${parseUrl(this.globalsFile)})`);
        }
        if (navigation.children) {
            navigation.children.forEach((navItem) => {
                var _a;
                if (navItem.isLabel) {
                    navJson.push(`\n### ${navItem.title}\n`);
                    (_a = navItem.children) === null || _a === void 0 ? void 0 : _a.forEach((navItemChild) => {
                        const longTitle = navItemChild.title.split('.');
                        const shortTitle = longTitle[longTitle.length - 1];
                        navJson.push(`- [${shortTitle}](${parseUrl(encodeURI(navItemChild.url))})`);
                    });
                }
            });
        }
        fs.outputFileSync(renderer.outputDirectory + '/_Sidebar.md', navJson.join('\n'));
    }
    get globalsFile() {
        return 'Modules.md';
    }
}
exports.default = GithubWikiTheme;
